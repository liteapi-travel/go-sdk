/*
Lite API

lite api hotel booking api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetData200Response struct for GetData200Response
type GetData200Response struct {
	Data []GetData200ResponseDataInner `json:"data,omitempty"`
}

// NewGetData200Response instantiates a new GetData200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetData200Response() *GetData200Response {
	this := GetData200Response{}
	return &this
}

// NewGetData200ResponseWithDefaults instantiates a new GetData200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetData200ResponseWithDefaults() *GetData200Response {
	this := GetData200Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetData200Response) GetData() []GetData200ResponseDataInner {
	if o == nil || isNil(o.Data) {
		var ret []GetData200ResponseDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetData200Response) GetDataOk() ([]GetData200ResponseDataInner, bool) {
	if o == nil || isNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetData200Response) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []GetData200ResponseDataInner and assigns it to the Data field.
func (o *GetData200Response) SetData(v []GetData200ResponseDataInner) {
	o.Data = v
}

func (o GetData200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGetData200Response struct {
	value *GetData200Response
	isSet bool
}

func (v NullableGetData200Response) Get() *GetData200Response {
	return v.value
}

func (v *NullableGetData200Response) Set(val *GetData200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetData200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetData200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetData200Response(val *GetData200Response) *NullableGetData200Response {
	return &NullableGetData200Response{value: val, isSet: true}
}

func (v NullableGetData200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetData200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

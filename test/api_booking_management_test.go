/*
Lite API

Testing BookingManagementApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/liteapi-travel/go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_BookingManagementApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	configuration.AddDefaultHeader("X-API-KEY", "YOUR_API_KEY")
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BookingManagementApiService BookingsBookingIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookingId string

		resp, httpRes, err := apiClient.BookingManagementApi.BookingsBookingIdGet(context.Background(), bookingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookingManagementApiService BookingsBookingIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookingId string

		resp, httpRes, err := apiClient.BookingManagementApi.BookingsBookingIdPut(context.Background(), bookingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookingManagementApiService BookingsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BookingManagementApi.BookingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
